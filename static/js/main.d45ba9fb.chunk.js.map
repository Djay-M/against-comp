{"version":3,"sources":["Components/TicTacToe.js","App.js","reportWebVitals.js","index.js"],"names":["TicTacToe","props","createtableArray","size","cellArray","row","cellObj","trID","col","id","onChange","validateCellVal","value","push","createTable","dataArray","className","map","rowData","createRows","rowObj","Object","keys","element","data","state","tableArray","player1","player2","targetValue","target","toLowerCase","targetId","forEach","toUpperCase","setState","this","style","color","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRAGqBA,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAaVC,iBAAmB,SAACC,GAEhB,IADA,IAAMC,EAAY,GACVC,EAAI,EAAGA,GAAKF,EAAME,IAAM,CAI5B,IAHA,IAAMC,EAAU,CACZC,KAAK,GAAD,OAAKF,IAELG,EAAI,EAAGA,GAAKL,EAAMK,IACtBF,EAAQ,GAAD,OAAID,EAAJ,cAAaG,IAAS,CACzBC,GAAG,GAAD,OAAKJ,EAAL,cAAcG,GAChBE,SAAU,EAAKC,gBACfC,MAAO,IAGfR,EAAUS,KAAKP,GAEnB,OAAOF,GA7BQ,EAgCnBU,YAAc,SAACC,GACX,OACI,uBAAOC,UAAU,QAAjB,SACI,gCACKD,EAAUE,KAAI,SAACC,GACZ,OAAO,EAAKC,WAAWD,WArCxB,EA4CnBC,WAAa,SAACC,GACV,OACI,oBAAIX,GAAIW,EAAOb,KAAf,SAEQc,OAAOC,KAAKF,GAAQH,KAAI,SAAAM,GACpB,GAAe,SAAZA,EACC,OAAO,oBAAId,GAAIW,EAAOG,GAASd,GAAIO,UAAU,OAAON,SAAUU,EAAOG,GAASb,SAAvE,SACH,uBAAOD,GAAIW,EAAOG,GAASd,GAAIO,UAAU,aAAaJ,MAAOQ,EAAOG,GAASX,gBAnDtF,EA4DnBD,gBAAkB,SAACa,GACf,MAAyC,EAAKC,MAAtCC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,QAASC,EAA7B,EAA6BA,QACvBC,EAAcL,EAAKM,OAAOlB,MAAMmB,cAChCC,EAAWR,EAAKM,OAAOrB,GAc7B,MAbmB,MAAhBoB,GAAuC,MAAhBA,IACtBH,EAAWO,SAAQ,SAAA5B,GACZA,EAAI2B,KACH3B,EAAI2B,GAAUpB,MAAQiB,EAAYK,kBAG1C,EAAKC,SAAS,CACVT,aACAC,SAAUA,EACVC,SAAUA,MAIX,GA3EP,EAAKH,MAAQ,CACTC,WAAY,EAAKxB,iBAAiB,GAClCyB,SAAS,EACTC,SAAS,GALE,E,0CAgFnB,WACI,OACI,sBAAKZ,UAAU,WAAf,UACI,qBAAKA,UAAU,YAAf,SACKoB,KAAKtB,YAAYsB,KAAKX,MAAMC,cAEjC,sBAAKV,UAAU,aAAf,UACI,oBAAIqB,MAAO,CAAEC,MAAM,GAAD,OAAKF,KAAKX,MAAME,QAAU,QAAS,QAArD,uBACA,qBAAIU,MAAO,CAAEC,MAAO,SAApB,UAA+BF,KAAKX,MAAME,QAAU,WAAa,WAAjE,eACA,oBAAIU,MAAO,CAAEC,MAAM,GAAD,OAAKF,KAAKX,MAAMG,QAAU,QAAS,QAArD,iC,GA1FmBW,aCQxBC,MARf,WACE,OACE,qBAAKxB,UAAU,MAAf,SACE,cAAC,EAAD,OCMSyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d45ba9fb.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './TicTacToe.css'\n\nexport default class TicTacToe extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tableArray: this.createtableArray(3),\n            player1: true,\n            player2: false\n        };\n    }\n\n    /**\n     * This basically creates N * N array of objects \n     * @param {INTERGER} size \n     * @returns {ARRAY}\n     */\n    createtableArray = (size) => {\n        const cellArray = []\n        for(var row=1; row<=size; row++){\n            const cellObj = {\n                trID: `${row}`\n            }\n            for(var col=1; col<=size; col++){\n                cellObj[`${row} * ${col}`] = {\n                    id: `${row} * ${col}`,\n                    onChange: this.validateCellVal,\n                    value: \"\"\n                }\n            }\n            cellArray.push(cellObj)\n        }\n        return cellArray;\n    }\n\n    createTable = (dataArray) => {\n        return (\n            <table className=\"table\">\n                <tbody>\n                    {dataArray.map((rowData) => {\n                        return this.createRows(rowData)\n                    })}\n                </tbody>\n            </table>\n        )\n    }\n\n    createRows = (rowObj) => {\n        return (\n            <tr id={rowObj.trID}>\n                {\n                    Object.keys(rowObj).map(element => {\n                        if(element !== 'trID'){\n                            return <td id={rowObj[element].id} className=\"cell\" onChange={rowObj[element].onChange}>\n                                <input id={rowObj[element].id} className=\"cell_input\" value={rowObj[element].value}></input>\n                            </td>\n                        }\n                    })\n                }\n            </tr>\n        )\n    }\n\n    validateCellVal = (data) => {\n        const { tableArray, player1, player2 } = this.state;\n        const targetValue = data.target.value.toLowerCase();\n        const targetId = data.target.id\n        if(targetValue === 'x' || targetValue === 'o'){\n            tableArray.forEach(row => {\n                if(row[targetId]) {\n                    row[targetId].value = targetValue.toUpperCase();\n                }\n            });\n            this.setState({ \n                tableArray, \n                player1: !player1,\n                player2: !player2,\n            })\n        }\n        // Need to thor error here \n        return true\n    }\n\n    render() {\n        return (\n            <div className=\"outerDiv\">\n                <div className=\"table_div\">\n                    {this.createTable(this.state.tableArray)}\n                </div>\n                <div className=\"footer_div\">\n                    <h3 style={{ color: `${this.state.player1 ? 'green': 'red'}`}}> Player 1</h3>\n                    <h4 style={{ color: 'black'}}>{this.state.player1 ? \"player 1\" : \"player 2\"} 's Move </h4>\n                    <h3 style={{ color: `${this.state.player2 ? 'green': 'red'}`}}> Player 2</h3>\n                </div>\n            </div>\n        )\n    }\n}\n","import './App.css';\nimport TicTacToe from './Components/TicTacToe';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TicTacToe />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}