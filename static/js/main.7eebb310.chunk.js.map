{"version":3,"sources":["Components/TicTacToe.js","App.js","reportWebVitals.js","index.js"],"names":["_","require","TicTacToe","props","createtableArray","size","cellArray","row","cellObj","col","push","createTable","dataArray","className","map","rowData","index","createRows","rowObj","rowId","id","Object","keys","element","onChange","validateCellVal","value","getMessage","state","isAllCellfilled","winner","style","color","player1","data","tableArray","player2","targetValue","target","toLowerCase","targetId","console","log","emptycells","forEach","pickBy","keyValue","length","playload","boardSize","updatedCell","updatedValue","tableData","player","split","updatedRow","updatedCol","isEmpty","omitBy","updatedColRangeValues","updatedDiagonalRangeValues","rowCounter","colCounter","JSON","stringify","checkForWinner","setState","newGame","window","location","reload","onClick","this","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7eebb310.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './TicTacToe.css'\nconst _ = require('lodash');\n\n\nconst boardSize = 3;\nconst checkForWinner = (playload) => {\n    const {\n        boardSize,\n        targetId: updatedCell,\n        targetValue: updatedValue,\n        tableArray: tableData,\n        player,\n    } = playload\n    const [updatedRow, updatedCol] = updatedCell.split('*')\n\n    // check for the row values\n    // remove the keys whhich matches the updatedValue from the updated row\n    const rowMatched = _.isEmpty(_.omitBy(tableData[updatedRow], (value) => { return value === updatedValue }));\n    if(rowMatched){\n        console.log(\"player ===> \", player)\n        return player;\n    }\n\n    let updatedColRangeValues = []\n    let updatedDiagonalRangeValues = []\n    let updatedAntiDiagonalRangeValues = []\n    let rowCounter = 0\n    let colCounter = 0\n\n    tableData.forEach(row => {\n\n        // check for the matching col values\n        row[`${rowCounter}*${updatedCol}`] === updatedValue && updatedColRangeValues.push(row[`${rowCounter}*${updatedCol}`]);\n\n        // check for the matching diagonal values\n        row[`${rowCounter}*${colCounter}`] === updatedValue && updatedDiagonalRangeValues.push(row[`${rowCounter}*${colCounter}`]);\n\n        rowCounter++\n        colCounter++\n\n    });\n    if(updatedColRangeValues.length === boardSize){\n        return player\n    }\n    console.log(updatedDiagonalRangeValues)\n    console.log(\" =====> \", JSON.stringify(tableData))\n    \n    return false;\n}\n\nexport default class TicTacToe extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isAllCellfilled: false,\n            tableArray: this.createtableArray(boardSize),\n            player1: true,\n            player2: false,\n            winner: false,\n        };\n    }\n\n    /**\n     * This basically creates N * N array of objects \n     * @param {INTERGER} size \n     * @returns {ARRAY}\n     */\n    createtableArray = (size) => {\n        const cellArray = []\n        for(var row=0; row<size; row++){\n            const cellObj = {}\n            for(var col=0; col<size; col++){\n                cellObj[`${row}*${col}`] = \"\"\n            }\n            cellArray.push(cellObj)\n        }\n        return cellArray;\n    }\n\n    createTable = (dataArray) => {\n        return (\n            <table className=\"table\">\n                <tbody>\n                    {dataArray.map((rowData, index) => {\n                        return this.createRows(rowData, index)\n                    })}\n                </tbody>\n            </table>\n        )\n    }\n\n    createRows = (rowObj, rowId) => {\n        return (\n            // rowId + 1 because the array starts from 0\n            <tr id={rowId}>\n                {\n                    // eslint-disable-next-line\n                    Object.keys(rowObj).map(element => {\n                        return <td id={element} className=\"cell\" onChange={this.validateCellVal}>\n                            <input id={element} className=\"cell_input\" value={rowObj[element]}></input>\n                        </td>\n                    })\n                }\n            </tr>\n        )\n    }\n\n    getMessage = () => {\n        const {isAllCellfilled, winner} = this.state;\n        if(isAllCellfilled || winner){\n            return (\n            <div>\n                <h2>Game Over </h2>\n                <h1>{winner ? `${winner} wins` : \"It's Draw\"}</h1>\n            </div>)\n        }\n        return  <h4 style={{ color: 'black'}}>{this.state.player1 ? \"player 1\" : \"player 2\"} 's Move </h4>\n    }\n\n    validateCellVal = (data) => {\n        const { tableArray, player1, player2 } = this.state;\n        const targetValue = data.target.value.toLowerCase();\n        const targetId = data.target.id\n        console.log(targetId)\n        let emptycells = {}\n        if((player1 && targetValue === 'x') || (player2 && targetValue === 'o')){\n            // Logic for updating the cell value\n            tableArray.forEach(row => {\n                if(row[targetId] === \"\") {\n                    row[targetId] = targetValue;\n                }\n                emptycells = {\n                    ...emptycells,\n                    ..._.pickBy(row, (keyValue) => {\n                        return keyValue === \"\"\n                    })\n                }\n                \n            });\n            const winner = Object.keys(emptycells).length <= 6 ? checkForWinner({\n                boardSize,\n                targetId,\n                targetValue,\n                tableArray,\n                player: player1 ? \"player1\" : \"player2\",\n            }) : false;\n\n            // console.log(\"winnner :::\", winner)\n\n            // checkForWinner({ \n            //     targetId,\n            //     targetValue,\n            //     tableArray,\n            //     player: player1 ? player1 : player2,\n            // })\n\n            this.setState({\n                isAllCellfilled: Object.keys(emptycells).length === 0,\n                tableArray, \n                player1: !player1,\n                player2: !player2,\n                winner\n            })\n        }\n        // Need to thor error here \n        return true\n    }\n\n    newGame = () => {\n        console.log(\"button clicked\")\n        window.location.reload(true);\n    }\n\n    render() {\n        return (\n            <div className=\"outerDiv\">\n                <div className=\"button_div\">\n                    <button onClick={this.newGame}>New Game</button>\n                </div>\n                <div className=\"table_div\">\n                    {this.createTable(this.state.tableArray)}\n                </div>\n                <div className=\"footer_div\">\n                    <h3 style={{ color: `${this.state.player1 ? 'green': 'red'}`}}> Player 1</h3>\n                    {this.getMessage()}\n                    <h3 style={{ color: `${this.state.player2 ? 'green': 'red'}`}}> Player 2</h3>\n                </div>\n            </div>\n        )\n    }\n}\n","import './App.css';\nimport TicTacToe from './Components/TicTacToe';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TicTacToe />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}