{"version":3,"sources":["Components/TicTacToe.js","App.js","reportWebVitals.js","index.js"],"names":["_","require","TicTacToe","props","createtableArray","size","cellArray","row","cellObj","trID","col","push","createTable","dataArray","className","map","rowData","createRows","rowObj","id","Object","keys","element","onChange","validateCellVal","value","getMessage","state","isAllCellfilled","style","color","player1","data","tableArray","player2","targetValue","target","toLowerCase","targetId","console","log","emptycells","forEach","toUpperCase","emptycellObj","pickBy","keyValue","isEmpty","setState","length","newGame","window","location","reload","onClick","this","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.74966caf.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './TicTacToe.css'\nconst _ = require('lodash');\n\nexport default class TicTacToe extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isAllCellfilled: false,\n            tableArray: this.createtableArray(3),\n            player1: true,\n            player2: false\n        };\n    }\n\n    /**\n     * This basically creates N * N array of objects \n     * @param {INTERGER} size \n     * @returns {ARRAY}\n     */\n    createtableArray = (size) => {\n        const cellArray = []\n        for(var row=1; row<=size; row++){\n            const cellObj = {\n                trID: `${row}`\n            }\n            for(var col=1; col<=size; col++){\n                // cellObj[`${row} * ${col}`] = {\n                //     id: `${row} * ${col}`,\n                //     onChange: this.validateCellVal,\n                //     value: \"\"\n                // }\n                cellObj[`${row} * ${col}`] = \"\"\n            }\n            cellArray.push(cellObj)\n        }\n        return cellArray;\n    }\n\n    createTable = (dataArray) => {\n        return (\n            <table className=\"table\">\n                <tbody>\n                    {dataArray.map((rowData) => {\n                        return this.createRows(rowData)\n                    })}\n                </tbody>\n            </table>\n        )\n    }\n\n    createRows = (rowObj) => {\n        return (\n            <tr id={rowObj.trID}>\n                {\n                    Object.keys(rowObj).map(element => {\n                        if(element !== 'trID'){\n                            return <td id={element} className=\"cell\" onChange={this.validateCellVal}>\n                                <input id={element} className=\"cell_input\" value={rowObj[element]}></input>\n                            </td>\n                        }\n                    })\n                }\n            </tr>\n        )\n    }\n\n    getMessage = () => {\n        const {isAllCellfilled} = this.state;\n        if(isAllCellfilled){\n            return <h2>Game Over</h2>\n        }\n        return  <h4 style={{ color: 'black'}}>{this.state.player1 ? \"player 1\" : \"player 2\"} 's Move </h4>\n    }\n\n    validateCellVal = (data) => {\n        const { tableArray, player1, player2 } = this.state;\n        const targetValue = data.target.value.toLowerCase();\n        const targetId = data.target.id\n        console.log(targetId)\n        let emptycells = []\n        if(targetValue === 'x' || targetValue === 'o'){\n            tableArray.forEach(row => {\n                if(row[targetId] || row[targetId] === \"\") {\n                    row[targetId] = targetValue.toUpperCase();\n                }\n                const emptycellObj = _.pickBy(row, (keyValue) => {\n                    return keyValue === \"\"\n                })\n                !_.isEmpty(emptycellObj) && emptycells.push(emptycellObj)\n            });\n\n            this.setState({\n                isAllCellfilled: emptycells.length === 0,\n                tableArray, \n                player1: !player1,\n                player2: !player2,\n            })\n        }\n        // Need to thor error here \n        return true\n    }\n\n    newGame = () => {\n        console.log(\"button clicked\")\n        window.location.reload(true);\n    }\n\n    render() {\n        return (\n            <div className=\"outerDiv\">\n                <div className=\"button_div\">\n                    <button onClick={this.newGame}>New Game</button>\n                </div>\n                <div className=\"table_div\">\n                    {this.createTable(this.state.tableArray)}\n                </div>\n                <div className=\"footer_div\">\n                    <h3 style={{ color: `${this.state.player1 ? 'green': 'red'}`}}> Player 1</h3>\n                    {this.getMessage()}\n                    <h3 style={{ color: `${this.state.player2 ? 'green': 'red'}`}}> Player 2</h3>\n                </div>\n            </div>\n        )\n    }\n}\n","import './App.css';\nimport TicTacToe from './Components/TicTacToe';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TicTacToe />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}